pipeline {
    agent any
    parameters {
        string(name: 'APPLICATION_YML_FILE', defaultValue: 'application.yml', description: 'Name of the application.yml file')
        string(name: 'DEPLOYMENT_YML_FILE', defaultValue: 'deployment.yml', description: 'Name of the deployment.yml file')
        string(name: 'ECR_URL', defaultValue: '736116236436.dkr.ecr.us-east-1.amazonaws.com', description: 'ECR URL')
        string(name: 'ECR_NAME', defaultValue: 'private-argocd', description: 'ECR Repository Name')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker Image Tag')
        string(name: 'APPLICATION_NAME', defaultValue: 'myapp-argo-application', description: 'Name of the application')
        string(name: 'CONTAINER_NAME', defaultValue: 'myapp', description: 'Name of the container')
        string(name: 'CONTAINER_PORT', defaultValue: '8080', description: 'Port of the container')
        string(name: 'CLUSTER_NAME', defaultValue: 'Cluster-1', description: 'Enter the name of your EKS cluster')
        string(name: 'REGION_NAME', defaultValue: 'us-east-1', description: 'Enter the region of your EKS cluster')
    }
    stages {
        stage("Git Clone") {
            steps {
                deleteDir()
                git credentialsId: 'YOUR_GITHUB_ACCESS', url: 'https://github.com/aqsa286/ArgoCD_Private.git', branch: 'main'
            }
        }
        stage("Replace Image Tag, Container_Name, Container_Port") {
            steps {
                script {
                    sh """
                    sed -i'' "s|image:.*|image: ${params.ECR_URL}/${ECR_NAME}:${DOCKER_TAG}|" ${params.DEPLOYMENT_YML_FILE}                    
                    sed -i'' "s|name:.*|name: ${CONTAINER_NAME}|" ${params.DEPLOYMENT_YML_FILE}
                    sed -i'' "s|port:.*|port: ${CONTAINER_PORT}|" ${params.DEPLOYMENT_YML_FILE}
                    """
                }
            }
        }
        stage("Replace Application Name") {
            steps {
                script {
                    sh """
                    sed -i'' "s|name: argo-app-name|name: ${APPLICATION_NAME}|" ${params.APPLICATION_YML_FILE}
                    """
                }
            }
        }
        stage('Commit changes') {
            steps {
                sh "git add ${params.DEPLOYMENT_YML_FILE} ${params.APPLICATION_YML_FILE}"
                sh 'git commit -m "Update deployment image and application details"'
            }
        }
        stage('Push changes') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'YOUR_GITHUB_ACCESS', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    sh "git push https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/aqsa286/ArgoCD_Private.git main"
                }
            }
        }
        stage('Update kubeconfig') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh "aws eks update-kubeconfig --name ${params.CLUSTER_NAME} --region ${params.REGION_NAME}"
                }
            }
        }
        stage('Install Argo CD on EKS Cluster') {
            steps {
                // Assuming you have AWS CLI configured with proper permissions
                // Install Argo CD on EKS cluster
                sh 'kubectl get nodes'
                script {
                    try {
                        sh 'kubectl create namespace dummy'
                    } catch (Exception e) {
                        echo "Namespace 'dummy' already exists, skipping creation..."
                    }
                }
                sh 'kubectl get namespaces'
                sh 'kubectl apply -n dummy -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml'
            }
        }
        stage('Deploy Application to Argo CD') {
            steps {
                // Deploy your application using kubectl apply
                sh 'kubectl apply -f application.yml'
            }
        }
        stage('Verify Deployment') {
            steps {
                sh 'kubectl get pods -n dummy'
                // Add more commands to verify the deployment as needed
            }
        }
    }
}


// Merge two pipeline: Argocd-private-application & Argocd_Setup_test. (means merge jenkinsfile 1 & 2)
// Argocd_Setup_final-P Jenkins-pipeline.
